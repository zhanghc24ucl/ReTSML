#!/usr/bin/env python3

import argparse


def run_ETL():
    """Run the ETL process with the specified data root."""
    print(f"Running ETL converting data/input/cnIXfuts_raw.npz to data/input/sample.npz")
    from retsml.data import raw_to_sample
    raw_to_sample()


def build_features(feature_names):
    """Build features with the given arguments and data root."""
    from retsml.feature import feature_builder
    from time import time
    for fname in feature_names:
        print(f'Building features: {fname}...')
        start_time = time()
        builder = feature_builder(fname)
        rv = builder.build()
        s = rv.shape[0]
        f = rv.shape[-1]
        end_time = time()
        if rv.ndim == 2:
            print(f'Build `{fname}` with {f} global features for {s} samples '
                  f'in {end_time - start_time:.2f} seconds.')
        else:
            m = rv.shape[1]
            print(f'Build `{fname}` with {f} features for ({s}, {m}) samples '
                  f'in {end_time - start_time:.2f} seconds.')


def tune_model(model_name, config_grid, metric):
    from retsml.model.run import tune
    tune(model_name, config_grid, metric='RMSE', verbose=True)


def main():
    """
    Main function to parse command line arguments and execute the corresponding task.

    Usage:
        ./ReTSML ETL
        ./ReTSML feature <feature_names>
        ./ReTSML tune <model_name> <config_grid> [--metric=<metric>]

    Examples:
        ./ReTSML ETL
        ./ReTSML feature ret,time
        ./ReTSML tune linear lars_p --metric=RMSE
    """
    arg_parser = argparse.ArgumentParser(description='Run ReTSML tasks')

    # Create subparsers for different tasks
    subparsers = arg_parser.add_subparsers(dest='task', help='Sub-command help')

    # etl subcommand
    subparsers.add_parser('ETL', help='Run ETL process')

    # feature subcommand
    parser_feature = subparsers.add_parser('feature', help='Build features')
    parser_feature.add_argument(
        'feature_names', type=str, help='Comma-separated list of feature arguments')

    # tune subcommand
    parser_tune = subparsers.add_parser('tune', help='Tune models')
    parser_tune.add_argument('model_name', type=str, help='Name of the model to tune')
    parser_tune.add_argument('config_grid', type=str, help='Configuration grid for hyperparameter tuning')
    parser_tune.add_argument('--metric', type=str, default='RMSE', help='Metric to evaluate the model (default: RMSE)')

    # Parse command line arguments
    args = arg_parser.parse_args()

    if args.task == 'ETL':
        run_ETL()
    elif args.task == 'feature':
        feature_names = args.feature_names.split(',')
        build_features(feature_names)
    elif args.task == 'tune':
        tune_model(args.model_name, args.config_grid, args.metric)
    else:
        arg_parser.print_help()


if __name__ == '__main__':
    main()
